import { Hono } from 'hono';
import { PrismaClient, User } from '@prisma/client';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import crypto from 'crypto'
import UAParser from 'ua-parser-js'
import { getConnInfo } from 'hono/cloudflare-workers' // atau 'hono/node-server' tergantung environment


const prisma = new PrismaClient();
const route = new Hono();

route.post('/refreshtoken', async (c) => {
    const body: {
        accesstoken: string
        refreshtoken: string
        rememberme: number
    } = await c.req.json()

    const { accesstoken, refreshtoken, rememberme } = body

    const userAgent = c.req.header('User-Agent') || ''    

    const conn = getConnInfo(c)
    const ipAddress = conn?.remote?.address || 'unknown' 
    // Kalau pakai nginx
    const ip = c.req.header('x-forwarded-for')?.split(',')[0]   

    const authHeader = c.req.header('Authorization')
    if (!authHeader?.startsWith('Bearer ')) {
        return c.json({ error: 'Missing or invalid Authorization header' }, 401)
    }    
    const bearerToken = authHeader?.split(' ')[1] // Ambil token setelah "Bearer "
    const payload = jwt.verify(bearerToken, process.env.JWT_SECRET!)

    // Cari user berdasarkan email atau username
    const user = await prisma.user.findFirst({
        where: {
        OR: [
            { accesstoken: accesstoken },
            { refreshtoken: refreshtoken }
        ]
        }
    })

    if (! user) {
        return c.json({ success: false, error: 'Password atau Email/Username salah' }, 404)
    }

    // Cek password
    //const isValid = await bcrypt.compare(password, user.password)

    //if (!isValid) {
    //  return c.json({ success: false, error: 'Password atau Email/Username salah' }, 401)
    //}

    // Buat JWT token
    const secret = process.env.JWT_SECRET || 'JWT-k4mb1ngC0klat'
    const token = jwt.sign(
        { userId: user.id, email: user.email, role: user.userrole }, // payload
        secret,
        { expiresIn: '30m' }
    )

    const refreshToken = crypto.randomBytes(64).toString('hex');
    const refreshTokenExpiry = new Date(Date.now() + ((rememberme) ? 7 : 1) * 24 * 60 * 60 * 1000)

    try {
        await prisma.user.update({
            where: { id: user.id },
            data: { refreshtoken: refreshToken, accesstoken: token, tokenexpiredate: refreshTokenExpiry }
        })
    } catch {
        return c.json({ success: false, error: 'System gagal membuat token, silahkan coba lagi' }, 400)
    }


    // Login berhasil
    return c.json({ success: true, message: 'Login berhasil',
        user: { id: user.id, username: user.username, email: user.email, role: user.userrole, token: token, refreshtoken: refreshToken}}, 200)
})

export default route